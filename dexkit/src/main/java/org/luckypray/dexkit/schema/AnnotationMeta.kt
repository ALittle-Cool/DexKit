// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class AnnotationMeta : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AnnotationMeta {
        __init(_i, _bb)
        return this
    }
    val id : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateId(id: Int) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.putInt(o + bb_pos, id)
            true
        } else {
            false
        }
    }
    val dexId : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateDexId(dexId: Int) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putInt(o + bb_pos, dexId)
            true
        } else {
            false
        }
    }
    fun targetElementTypes(j: Int) : Byte {
        val o = __offset(8)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1)
        } else {
            0
        }
    }
    val targetElementTypesLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val targetElementTypesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun targetElementTypesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    fun mutateTargetElementTypes(j: Int, targetElementTypes: Byte) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.put(__vector(o) + j * 1, targetElementTypes)
            true
        } else {
            false
        }
    }
    val retentionPolicy : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateRetentionPolicy(retentionPolicy: Byte) : Boolean {
        val o = __offset(10)
        return if (o != 0) {
            bb.put(o + bb_pos, retentionPolicy)
            true
        } else {
            false
        }
    }
    fun members(j: Int) : AnnotationMember? = members(AnnotationMember(), j)
    fun members(obj: AnnotationMember, j: Int) : AnnotationMember? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val membersLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsAnnotationMeta(_bb: ByteBuffer): AnnotationMeta = getRootAsAnnotationMeta(_bb, AnnotationMeta())
        fun getRootAsAnnotationMeta(_bb: ByteBuffer, obj: AnnotationMeta): AnnotationMeta {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAnnotationMeta(builder: FlatBufferBuilder, id: Int, dexId: Int, targetElementTypesOffset: Int, retentionPolicy: Byte, membersOffset: Int) : Int {
            builder.startTable(5)
            addMembers(builder, membersOffset)
            addTargetElementTypes(builder, targetElementTypesOffset)
            addDexId(builder, dexId)
            addId(builder, id)
            addRetentionPolicy(builder, retentionPolicy)
            return endAnnotationMeta(builder)
        }
        fun startAnnotationMeta(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addInt(0, id, 0)
        fun addDexId(builder: FlatBufferBuilder, dexId: Int) = builder.addInt(1, dexId, 0)
        fun addTargetElementTypes(builder: FlatBufferBuilder, targetElementTypes: Int) = builder.addOffset(2, targetElementTypes, 0)
        fun createTargetElementTypesVector(builder: FlatBufferBuilder, data: ByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i])
            }
            return builder.endVector()
        }
        fun startTargetElementTypesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addRetentionPolicy(builder: FlatBufferBuilder, retentionPolicy: Byte) = builder.addByte(3, retentionPolicy, 0)
        fun addMembers(builder: FlatBufferBuilder, members: Int) = builder.addOffset(4, members, 0)
        fun createMembersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMembersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endAnnotationMeta(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
