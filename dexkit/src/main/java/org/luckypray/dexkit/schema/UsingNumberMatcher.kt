// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class UsingNumberMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UsingNumberMatcher {
        __init(_i, _bb)
        return this
    }
    val usingType : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateUsingType(usingType: Byte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, usingType)
            true
        } else {
            false
        }
    }
    val numberType : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun mutateNumberType(numberType: UByte) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, numberType.toByte())
            true
        } else {
            false
        }
    }
    fun number(obj: Table) : Table? {
        val o = __offset(8); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsUsingNumberMatcher(_bb: ByteBuffer): UsingNumberMatcher = getRootAsUsingNumberMatcher(_bb, UsingNumberMatcher())
        fun getRootAsUsingNumberMatcher(_bb: ByteBuffer, obj: UsingNumberMatcher): UsingNumberMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUsingNumberMatcher(builder: FlatBufferBuilder, usingType: Byte, numberType: UByte, numberOffset: Int) : Int {
            builder.startTable(3)
            addNumber(builder, numberOffset)
            addNumberType(builder, numberType)
            addUsingType(builder, usingType)
            return endUsingNumberMatcher(builder)
        }
        fun startUsingNumberMatcher(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addUsingType(builder: FlatBufferBuilder, usingType: Byte) = builder.addByte(0, usingType, 0)
        fun addNumberType(builder: FlatBufferBuilder, numberType: UByte) = builder.addByte(1, numberType.toByte(), 0)
        fun addNumber(builder: FlatBufferBuilder, number: Int) = builder.addOffset(2, number, 0)
        fun endUsingNumberMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
