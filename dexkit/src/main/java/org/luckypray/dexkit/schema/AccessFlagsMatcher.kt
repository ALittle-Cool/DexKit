// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class AccessFlagsMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AccessFlagsMatcher {
        __init(_i, _bb)
        return this
    }
    val matchType : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateMatchType(matchType: Byte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, matchType)
            true
        } else {
            false
        }
    }
    val flags : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateFlags(flags: UInt) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putInt(o + bb_pos, flags.toInt())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsAccessFlagsMatcher(_bb: ByteBuffer): AccessFlagsMatcher = getRootAsAccessFlagsMatcher(_bb, AccessFlagsMatcher())
        fun getRootAsAccessFlagsMatcher(_bb: ByteBuffer, obj: AccessFlagsMatcher): AccessFlagsMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAccessFlagsMatcher(builder: FlatBufferBuilder, matchType: Byte, flags: UInt) : Int {
            builder.startTable(2)
            addFlags(builder, flags)
            addMatchType(builder, matchType)
            return endAccessFlagsMatcher(builder)
        }
        fun startAccessFlagsMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(0, matchType, 0)
        fun addFlags(builder: FlatBufferBuilder, flags: UInt) = builder.addInt(1, flags.toInt(), 0)
        fun endAccessFlagsMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
