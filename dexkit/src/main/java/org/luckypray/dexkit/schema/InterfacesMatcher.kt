// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class InterfacesMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : InterfacesMatcher {
        __init(_i, _bb)
        return this
    }
    val interfaceCount : IntRange? get() = interfaceCount(IntRange())
    fun interfaceCount(obj: IntRange) : IntRange? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun containInterfaces(j: Int) : ClassMatcher? = containInterfaces(ClassMatcher(), j)
    fun containInterfaces(obj: ClassMatcher, j: Int) : ClassMatcher? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val containInterfacesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsInterfacesMatcher(_bb: ByteBuffer): InterfacesMatcher = getRootAsInterfacesMatcher(_bb, InterfacesMatcher())
        fun getRootAsInterfacesMatcher(_bb: ByteBuffer, obj: InterfacesMatcher): InterfacesMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createInterfacesMatcher(builder: FlatBufferBuilder, interfaceCountOffset: Int, containInterfacesOffset: Int) : Int {
            builder.startTable(2)
            addContainInterfaces(builder, containInterfacesOffset)
            addInterfaceCount(builder, interfaceCountOffset)
            return endInterfacesMatcher(builder)
        }
        fun startInterfacesMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addInterfaceCount(builder: FlatBufferBuilder, interfaceCount: Int) = builder.addOffset(0, interfaceCount, 0)
        fun addContainInterfaces(builder: FlatBufferBuilder, containInterfaces: Int) = builder.addOffset(1, containInterfaces, 0)
        fun createContainInterfacesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startContainInterfacesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endInterfacesMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
