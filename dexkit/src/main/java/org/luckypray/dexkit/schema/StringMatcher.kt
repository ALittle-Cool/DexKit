// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class StringMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StringMatcher {
        __init(_i, _bb)
        return this
    }
    val type : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateType(type: Byte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, type)
            true
        } else {
            false
        }
    }
    val value : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val valueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun valueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsStringMatcher(_bb: ByteBuffer): StringMatcher = getRootAsStringMatcher(_bb, StringMatcher())
        fun getRootAsStringMatcher(_bb: ByteBuffer, obj: StringMatcher): StringMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createStringMatcher(builder: FlatBufferBuilder, type: Byte, valueOffset: Int) : Int {
            builder.startTable(2)
            addValue(builder, valueOffset)
            addType(builder, type)
            return endStringMatcher(builder)
        }
        fun startStringMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(0, type, 0)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(1, value, 0)
        fun endStringMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
