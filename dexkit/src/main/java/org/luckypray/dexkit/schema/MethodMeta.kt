// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class MethodMeta : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MethodMeta {
        __init(_i, _bb)
        return this
    }
    val id : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateId(id: Int) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.putInt(o + bb_pos, id)
            true
        } else {
            false
        }
    }
    val dexId : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateDexId(dexId: Int) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putInt(o + bb_pos, dexId)
            true
        } else {
            false
        }
    }
    fun annotations(j: Int) : Int {
        val o = __offset(8)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val annotationsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val annotationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 4)
    fun annotationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 4)
    fun mutateAnnotations(j: Int, annotations: Int) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.putInt(__vector(o) + j * 4, annotations)
            true
        } else {
            false
        }
    }
    val accessFlags : UInt
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateAccessFlags(accessFlags: UInt) : Boolean {
        val o = __offset(10)
        return if (o != 0) {
            bb.putInt(o + bb_pos, accessFlags.toInt())
            true
        } else {
            false
        }
    }
    val dexDescriptor : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dexDescriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun dexDescriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val returnType : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateReturnType(returnType: Int) : Boolean {
        val o = __offset(14)
        return if (o != 0) {
            bb.putInt(o + bb_pos, returnType)
            true
        } else {
            false
        }
    }
    fun parameterTypes(j: Int) : Int {
        val o = __offset(16)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val parameterTypesLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    val parameterTypesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 4)
    fun parameterTypesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 4)
    fun mutateParameterTypes(j: Int, parameterTypes: Int) : Boolean {
        val o = __offset(16)
        return if (o != 0) {
            bb.putInt(__vector(o) + j * 4, parameterTypes)
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsMethodMeta(_bb: ByteBuffer): MethodMeta = getRootAsMethodMeta(_bb, MethodMeta())
        fun getRootAsMethodMeta(_bb: ByteBuffer, obj: MethodMeta): MethodMeta {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMethodMeta(builder: FlatBufferBuilder, id: Int, dexId: Int, annotationsOffset: Int, accessFlags: UInt, dexDescriptorOffset: Int, returnType: Int, parameterTypesOffset: Int) : Int {
            builder.startTable(7)
            addParameterTypes(builder, parameterTypesOffset)
            addReturnType(builder, returnType)
            addDexDescriptor(builder, dexDescriptorOffset)
            addAccessFlags(builder, accessFlags)
            addAnnotations(builder, annotationsOffset)
            addDexId(builder, dexId)
            addId(builder, id)
            return endMethodMeta(builder)
        }
        fun startMethodMeta(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addInt(0, id, 0)
        fun addDexId(builder: FlatBufferBuilder, dexId: Int) = builder.addInt(1, dexId, 0)
        fun addAnnotations(builder: FlatBufferBuilder, annotations: Int) = builder.addOffset(2, annotations, 0)
        fun createAnnotationsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startAnnotationsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAccessFlags(builder: FlatBufferBuilder, accessFlags: UInt) = builder.addInt(3, accessFlags.toInt(), 0)
        fun addDexDescriptor(builder: FlatBufferBuilder, dexDescriptor: Int) = builder.addOffset(4, dexDescriptor, 0)
        fun addReturnType(builder: FlatBufferBuilder, returnType: Int) = builder.addInt(5, returnType, 0)
        fun addParameterTypes(builder: FlatBufferBuilder, parameterTypes: Int) = builder.addOffset(6, parameterTypes, 0)
        fun createParameterTypesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startParameterTypesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endMethodMeta(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
