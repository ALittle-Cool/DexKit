// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class OptionalAnnotationMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OptionalAnnotationMatcher {
        __init(_i, _bb)
        return this
    }
    val annotation : AnnotationMatcher? get() = annotation(AnnotationMatcher())
    fun annotation(obj: AnnotationMatcher) : AnnotationMatcher? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsOptionalAnnotationMatcher(_bb: ByteBuffer): OptionalAnnotationMatcher = getRootAsOptionalAnnotationMatcher(_bb, OptionalAnnotationMatcher())
        fun getRootAsOptionalAnnotationMatcher(_bb: ByteBuffer, obj: OptionalAnnotationMatcher): OptionalAnnotationMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOptionalAnnotationMatcher(builder: FlatBufferBuilder, annotationOffset: Int) : Int {
            builder.startTable(1)
            addAnnotation(builder, annotationOffset)
            return endOptionalAnnotationMatcher(builder)
        }
        fun startOptionalAnnotationMatcher(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addAnnotation(builder: FlatBufferBuilder, annotation: Int) = builder.addOffset(0, annotation, 0)
        fun endOptionalAnnotationMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
