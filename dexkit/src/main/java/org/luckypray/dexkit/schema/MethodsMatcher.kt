// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class MethodsMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MethodsMatcher {
        __init(_i, _bb)
        return this
    }
    fun containMethods(j: Int) : MethodMatcher? = containMethods(MethodMatcher(), j)
    fun containMethods(obj: MethodMatcher, j: Int) : MethodMatcher? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val containMethodsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val methodCount : IntRange? get() = methodCount(IntRange())
    fun methodCount(obj: IntRange) : IntRange? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsMethodsMatcher(_bb: ByteBuffer): MethodsMatcher = getRootAsMethodsMatcher(_bb, MethodsMatcher())
        fun getRootAsMethodsMatcher(_bb: ByteBuffer, obj: MethodsMatcher): MethodsMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMethodsMatcher(builder: FlatBufferBuilder, containMethodsOffset: Int, methodCountOffset: Int) : Int {
            builder.startTable(2)
            addMethodCount(builder, methodCountOffset)
            addContainMethods(builder, containMethodsOffset)
            return endMethodsMatcher(builder)
        }
        fun startMethodsMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addContainMethods(builder: FlatBufferBuilder, containMethods: Int) = builder.addOffset(0, containMethods, 0)
        fun createContainMethodsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startContainMethodsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMethodCount(builder: FlatBufferBuilder, methodCount: Int) = builder.addOffset(1, methodCount, 0)
        fun endMethodsMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
