// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class MethodsMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MethodsMatcher {
        __init(_i, _bb)
        return this
    }
    val methodCount : IntRange? get() = methodCount(IntRange())
    fun methodCount(obj: IntRange) : IntRange? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val matchType : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateMatchType(matchType: Byte) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, matchType)
            true
        } else {
            false
        }
    }
    fun methods(j: Int) : MethodMatcher? = methods(MethodMatcher(), j)
    fun methods(obj: MethodMatcher, j: Int) : MethodMatcher? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val methodsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsMethodsMatcher(_bb: ByteBuffer): MethodsMatcher = getRootAsMethodsMatcher(_bb, MethodsMatcher())
        fun getRootAsMethodsMatcher(_bb: ByteBuffer, obj: MethodsMatcher): MethodsMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMethodsMatcher(builder: FlatBufferBuilder, methodCountOffset: Int, matchType: Byte, methodsOffset: Int) : Int {
            builder.startTable(3)
            addMethods(builder, methodsOffset)
            addMethodCount(builder, methodCountOffset)
            addMatchType(builder, matchType)
            return endMethodsMatcher(builder)
        }
        fun startMethodsMatcher(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addMethodCount(builder: FlatBufferBuilder, methodCount: Int) = builder.addOffset(0, methodCount, 0)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(1, matchType, 0)
        fun addMethods(builder: FlatBufferBuilder, methods: Int) = builder.addOffset(2, methods, 0)
        fun createMethodsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMethodsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endMethodsMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
