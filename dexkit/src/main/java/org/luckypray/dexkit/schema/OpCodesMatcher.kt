// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class OpCodesMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OpCodesMatcher {
        __init(_i, _bb)
        return this
    }
    val matchType : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateMatchType(matchType: Byte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, matchType)
            true
        } else {
            false
        }
    }
    fun opCodes(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val opCodesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val opCodesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun opCodesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    fun mutateOpCodes(j: Int, opCodes: UByte) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(__vector(o) + j * 1, opCodes.toByte())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsOpCodesMatcher(_bb: ByteBuffer): OpCodesMatcher = getRootAsOpCodesMatcher(_bb, OpCodesMatcher())
        fun getRootAsOpCodesMatcher(_bb: ByteBuffer, obj: OpCodesMatcher): OpCodesMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOpCodesMatcher(builder: FlatBufferBuilder, matchType: Byte, opCodesOffset: Int) : Int {
            builder.startTable(2)
            addOpCodes(builder, opCodesOffset)
            addMatchType(builder, matchType)
            return endOpCodesMatcher(builder)
        }
        fun startOpCodesMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(0, matchType, 0)
        fun addOpCodes(builder: FlatBufferBuilder, opCodes: Int) = builder.addOffset(1, opCodes, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createOpCodesVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startOpCodesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endOpCodesMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
