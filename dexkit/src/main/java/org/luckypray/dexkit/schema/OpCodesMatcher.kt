// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class OpCodesMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OpCodesMatcher {
        __init(_i, _bb)
        return this
    }
    val matchType : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun opCodes(j: Int) : Short {
        val o = __offset(6)
        return if (o != 0) {
            bb.getShort(__vector(o) + j * 2)
        } else {
            0
        }
    }
    val opCodesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val opCodesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 2)
    fun opCodesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 2)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsOpCodesMatcher(_bb: ByteBuffer): OpCodesMatcher = getRootAsOpCodesMatcher(_bb, OpCodesMatcher())
        fun getRootAsOpCodesMatcher(_bb: ByteBuffer, obj: OpCodesMatcher): OpCodesMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOpCodesMatcher(builder: FlatBufferBuilder, matchType: Byte, opCodesOffset: Int) : Int {
            builder.startTable(2)
            addOpCodes(builder, opCodesOffset)
            addMatchType(builder, matchType)
            return endOpCodesMatcher(builder)
        }
        fun startOpCodesMatcher(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(0, matchType, 0)
        fun addOpCodes(builder: FlatBufferBuilder, opCodes: Int) = builder.addOffset(1, opCodes, 0)
        fun createOpCodesVector(builder: FlatBufferBuilder, data: ShortArray) : Int {
            builder.startVector(2, data.size, 2)
            for (i in data.size - 1 downTo 0) {
                builder.addShort(data[i])
            }
            return builder.endVector()
        }
        fun startOpCodesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(2, numElems, 2)
        fun endOpCodesMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
