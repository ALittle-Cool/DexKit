package org.luckypray.dexkit.util

internal object OpCodeUtil {

    private val opFormat = arrayOf(
        "nop",
        "move",
        "move/from16",
        "move/16",
        "move-wide",
        "move-wide/from16",
        "move-wide/16",
        "move-object",
        "move-object/from16",
        "move-object/16",
        "move-result",
        "move-result-wide",
        "move-result-object",
        "move-exception",
        "return-void",
        "return",
        "return-wide",
        "return-object",
        "const/4",
        "const/16",
        "const",
        "const/high16",
        "const-wide/16",
        "const-wide/32",
        "const-wide",
        "const-wide/high16",
        "const-string",
        "const-string/jumbo",
        "const-class",
        "monitor-enter",
        "monitor-exit",
        "check-cast",
        "instance-of",
        "array-length",
        "new-instance",
        "new-array",
        "filled-new-array",
        "filled-new-array/range",
        "fill-array-data",
        "throw",
        "goto",
        "goto/16",
        "goto/32",
        "packed-switch",
        "sparse-switch",
        "cmpl-float",
        "cmpg-float",
        "cmpl-double",
        "cmpg-double",
        "cmp-long",
        "if-eq",
        "if-ne",
        "if-lt",
        "if-ge",
        "if-gt",
        "if-le",
        "if-eqz",
        "if-nez",
        "if-ltz",
        "if-gez",
        "if-gtz",
        "if-lez",
        "unused-3e",
        "unused-3f",
        "unused-40",
        "unused-41",
        "unused-42",
        "unused-43",
        "aget",
        "aget-wide",
        "aget-object",
        "aget-boolean",
        "aget-byte",
        "aget-char",
        "aget-short",
        "aput",
        "aput-wide",
        "aput-object",
        "aput-boolean",
        "aput-byte",
        "aput-char",
        "aput-short",
        "iget",
        "iget-wide",
        "iget-object",
        "iget-boolean",
        "iget-byte",
        "iget-char",
        "iget-short",
        "iput",
        "iput-wide",
        "iput-object",
        "iput-boolean",
        "iput-byte",
        "iput-char",
        "iput-short",
        "sget",
        "sget-wide",
        "sget-object",
        "sget-boolean",
        "sget-byte",
        "sget-char",
        "sget-short",
        "sput",
        "sput-wide",
        "sput-object",
        "sput-boolean",
        "sput-byte",
        "sput-char",
        "sput-short",
        "invoke-virtual",
        "invoke-super",
        "invoke-direct",
        "invoke-static",
        "invoke-interface",
        "return-void-no-barrier",
        "invoke-virtual/range",
        "invoke-super/range",
        "invoke-direct/range",
        "invoke-static/range",
        "invoke-interface/range",
        "unused-79",
        "unused-7a",
        "neg-int",
        "not-int",
        "neg-long",
        "not-long",
        "neg-float",
        "neg-double",
        "int-to-long",
        "int-to-float",
        "int-to-double",
        "long-to-int",
        "long-to-float",
        "long-to-double",
        "float-to-int",
        "float-to-long",
        "float-to-double",
        "double-to-int",
        "double-to-long",
        "double-to-float",
        "int-to-byte",
        "int-to-char",
        "int-to-short",
        "add-int",
        "sub-int",
        "mul-int",
        "div-int",
        "rem-int",
        "and-int",
        "or-int",
        "xor-int",
        "shl-int",
        "shr-int",
        "ushr-int",
        "add-long",
        "sub-long",
        "mul-long",
        "div-long",
        "rem-long",
        "and-long",
        "or-long",
        "xor-long",
        "shl-long",
        "shr-long",
        "ushr-long",
        "add-float",
        "sub-float",
        "mul-float",
        "div-float",
        "rem-float",
        "add-double",
        "sub-double",
        "mul-double",
        "div-double",
        "rem-double",
        "add-int/2addr",
        "sub-int/2addr",
        "mul-int/2addr",
        "div-int/2addr",
        "rem-int/2addr",
        "and-int/2addr",
        "or-int/2addr",
        "xor-int/2addr",
        "shl-int/2addr",
        "shr-int/2addr",
        "ushr-int/2addr",
        "add-long/2addr",
        "sub-long/2addr",
        "mul-long/2addr",
        "div-long/2addr",
        "rem-long/2addr",
        "and-long/2addr",
        "or-long/2addr",
        "xor-long/2addr",
        "shl-long/2addr",
        "shr-long/2addr",
        "ushr-long/2addr",
        "add-float/2addr",
        "sub-float/2addr",
        "mul-float/2addr",
        "div-float/2addr",
        "rem-float/2addr",
        "add-double/2addr",
        "sub-double/2addr",
        "mul-double/2addr",
        "div-double/2addr",
        "rem-double/2addr",
        "add-int/lit16",
        "rsub-int",
        "mul-int/lit16",
        "div-int/lit16",
        "rem-int/lit16",
        "and-int/lit16",
        "or-int/lit16",
        "xor-int/lit16",
        "add-int/lit8",
        "rsub-int/lit8",
        "mul-int/lit8",
        "div-int/lit8",
        "rem-int/lit8",
        "and-int/lit8",
        "or-int/lit8",
        "xor-int/lit8",
        "shl-int/lit8",
        "shr-int/lit8",
        "ushr-int/lit8",
        "iget-quick",
        "iget-wide-quick",
        "iget-object-quick",
        "iput-quick",
        "iput-wide-quick",
        "iput-object-quick",
        "invoke-virtual-quick",
        "invoke-virtual/range-quick",
        "iput-boolean-quick",
        "iput-byte-quick",
        "iput-char-quick",
        "iput-short-quick",
        "iget-boolean-quick",
        "iget-byte-quick",
        "iget-char-quick",
        "iget-short-quick",
        "unused-f3",
        "unused-f4",
        "unused-f5",
        "unused-f6",
        "unused-f7",
        "unused-f8",
        "unused-f9",
        "invoke-polymorphic",
        "invoke-polymorphic/range",
        "invoke-custom",
        "invoke-custom/range",
        "const-method-handle",
        "const-method-type",
    )

    private val opFormatMap = mutableMapOf(
        "nop" to 0,
        "move" to 1,
        "move/from16" to 2,
        "move/16" to 3,
        "move-wide" to 4,
        "move-wide/from16" to 5,
        "move-wide/16" to 6,
        "move-object" to 7,
        "move-object/from16" to 8,
        "move-object/16" to 9,
        "move-result" to 10,
        "move-result-wide" to 11,
        "move-result-object" to 12,
        "move-exception" to 13,
        "return-void" to 14,
        "return" to 15,
        "return-wide" to 16,
        "return-object" to 17,
        "const/4" to 18,
        "const/16" to 19,
        "const" to 20,
        "const/high16" to 21,
        "const-wide/16" to 22,
        "const-wide/32" to 23,
        "const-wide" to 24,
        "const-wide/high16" to 25,
        "const-string" to 26,
        "const-string/jumbo" to 27,
        "const-class" to 28,
        "monitor-enter" to 29,
        "monitor-exit" to 30,
        "check-cast" to 31,
        "instance-of" to 32,
        "array-length" to 33,
        "new-instance" to 34,
        "new-array" to 35,
        "filled-new-array" to 36,
        "filled-new-array/range" to 37,
        "fill-array-data" to 38,
        "throw" to 39,
        "goto" to 40,
        "goto/16" to 41,
        "goto/32" to 42,
        "packed-switch" to 43,
        "sparse-switch" to 44,
        "cmpl-float" to 45,
        "cmpg-float" to 46,
        "cmpl-double" to 47,
        "cmpg-double" to 48,
        "cmp-long" to 49,
        "if-eq" to 50,
        "if-ne" to 51,
        "if-lt" to 52,
        "if-ge" to 53,
        "if-gt" to 54,
        "if-le" to 55,
        "if-eqz" to 56,
        "if-nez" to 57,
        "if-ltz" to 58,
        "if-gez" to 59,
        "if-gtz" to 60,
        "if-lez" to 61,
        "aget" to 68,
        "aget-wide" to 69,
        "aget-object" to 70,
        "aget-boolean" to 71,
        "aget-byte" to 72,
        "aget-char" to 73,
        "aget-short" to 74,
        "aput" to 75,
        "aput-wide" to 76,
        "aput-object" to 77,
        "aput-boolean" to 78,
        "aput-byte" to 79,
        "aput-char" to 80,
        "aput-short" to 81,
        "iget" to 82,
        "iget-wide" to 83,
        "iget-object" to 84,
        "iget-boolean" to 85,
        "iget-byte" to 86,
        "iget-char" to 87,
        "iget-short" to 88,
        "iput" to 89,
        "iput-wide" to 90,
        "iput-object" to 91,
        "iput-boolean" to 92,
        "iput-byte" to 93,
        "iput-char" to 94,
        "iput-short" to 95,
        "sget" to 96,
        "sget-wide" to 97,
        "sget-object" to 98,
        "sget-boolean" to 99,
        "sget-byte" to 100,
        "sget-char" to 101,
        "sget-short" to 102,
        "sput" to 103,
        "sput-wide" to 104,
        "sput-object" to 105,
        "sput-boolean" to 106,
        "sput-byte" to 107,
        "sput-char" to 108,
        "sput-short" to 109,
        "invoke-virtual" to 110,
        "invoke-super" to 111,
        "invoke-direct" to 112,
        "invoke-static" to 113,
        "invoke-interface" to 114,
        "return-void-no-barrier" to 115,
        "invoke-virtual/range" to 116,
        "invoke-super/range" to 117,
        "invoke-direct/range" to 118,
        "invoke-static/range" to 119,
        "invoke-interface/range" to 120,
        "neg-int" to 123,
        "not-int" to 124,
        "neg-long" to 125,
        "not-long" to 126,
        "neg-float" to 127,
        "neg-double" to 128,
        "int-to-long" to 129,
        "int-to-float" to 130,
        "int-to-double" to 131,
        "long-to-int" to 132,
        "long-to-float" to 133,
        "long-to-double" to 134,
        "float-to-int" to 135,
        "float-to-long" to 136,
        "float-to-double" to 137,
        "double-to-int" to 138,
        "double-to-long" to 139,
        "double-to-float" to 140,
        "int-to-byte" to 141,
        "int-to-char" to 142,
        "int-to-short" to 143,
        "add-int" to 144,
        "sub-int" to 145,
        "mul-int" to 146,
        "div-int" to 147,
        "rem-int" to 148,
        "and-int" to 149,
        "or-int" to 150,
        "xor-int" to 151,
        "shl-int" to 152,
        "shr-int" to 153,
        "ushr-int" to 154,
        "add-long" to 155,
        "sub-long" to 156,
        "mul-long" to 157,
        "div-long" to 158,
        "rem-long" to 159,
        "and-long" to 160,
        "or-long" to 161,
        "xor-long" to 162,
        "shl-long" to 163,
        "shr-long" to 164,
        "ushr-long" to 165,
        "add-float" to 166,
        "sub-float" to 167,
        "mul-float" to 168,
        "div-float" to 169,
        "rem-float" to 170,
        "add-double" to 171,
        "sub-double" to 172,
        "mul-double" to 173,
        "div-double" to 174,
        "rem-double" to 175,
        "add-int/2addr" to 176,
        "sub-int/2addr" to 177,
        "mul-int/2addr" to 178,
        "div-int/2addr" to 179,
        "rem-int/2addr" to 180,
        "and-int/2addr" to 181,
        "or-int/2addr" to 182,
        "xor-int/2addr" to 183,
        "shl-int/2addr" to 184,
        "shr-int/2addr" to 185,
        "ushr-int/2addr" to 186,
        "add-long/2addr" to 187,
        "sub-long/2addr" to 188,
        "mul-long/2addr" to 189,
        "div-long/2addr" to 190,
        "rem-long/2addr" to 191,
        "and-long/2addr" to 192,
        "or-long/2addr" to 193,
        "xor-long/2addr" to 194,
        "shl-long/2addr" to 195,
        "shr-long/2addr" to 196,
        "ushr-long/2addr" to 197,
        "add-float/2addr" to 198,
        "sub-float/2addr" to 199,
        "mul-float/2addr" to 200,
        "div-float/2addr" to 201,
        "rem-float/2addr" to 202,
        "add-double/2addr" to 203,
        "sub-double/2addr" to 204,
        "mul-double/2addr" to 205,
        "div-double/2addr" to 206,
        "rem-double/2addr" to 207,
        "add-int/lit16" to 208,
        "rsub-int" to 209,
        "mul-int/lit16" to 210,
        "div-int/lit16" to 211,
        "rem-int/lit16" to 212,
        "and-int/lit16" to 213,
        "or-int/lit16" to 214,
        "xor-int/lit16" to 215,
        "add-int/lit8" to 216,
        "rsub-int/lit8" to 217,
        "mul-int/lit8" to 218,
        "div-int/lit8" to 219,
        "rem-int/lit8" to 220,
        "and-int/lit8" to 221,
        "or-int/lit8" to 222,
        "xor-int/lit8" to 223,
        "shl-int/lit8" to 224,
        "shr-int/lit8" to 225,
        "ushr-int/lit8" to 226,
        "iget-quick" to 227,
        "iget-wide-quick" to 228,
        "iget-object-quick" to 229,
        "iput-quick" to 230,
        "iput-wide-quick" to 231,
        "iput-object-quick" to 232,
        "invoke-virtual-quick" to 233,
        "invoke-virtual/range-quick" to 234,
        "iput-boolean-quick" to 235,
        "iput-byte-quick" to 236,
        "iput-char-quick" to 237,
        "iput-short-quick" to 238,
        "iget-boolean-quick" to 239,
        "iget-byte-quick" to 240,
        "iget-char-quick" to 241,
        "iget-short-quick" to 242,
        "invoke-polymorphic" to 250,
        "invoke-polymorphic/range" to 251,
        "invoke-custom" to 252,
        "invoke-custom/range" to 253,
        "const-method-handle" to 254,
        "const-method-type" to 255
    )

    /**
     * Convert opcode to smali format.
     * ----------------
     * 转换操作码为 smali 指令
     *
     * @param opcode opcode / 操作码
     * @return smali format / smali 指令
     */
    @JvmStatic
    fun getOpFormat(opcode: Int): String {
        if (opcode < 0 || opcode >= opFormat.size) {
            throw IllegalArgumentException("opcode: ${opcode.toString(16)} is out of range")
        }
        return opFormat[opcode]
    }

    /**
     * Convert smali format to opcode.
     * ----------------
     * 转换 smali 指令为操作码
     *
     * @param opFormat smali format / smali 指令
     * @return opcode / 操作码
     */
    @JvmStatic
    fun getOpCode(opFormat: String): Int {
        return opFormatMap[opFormat] ?: throw IllegalArgumentException("opFormat: $opFormat is not found")
    }
}