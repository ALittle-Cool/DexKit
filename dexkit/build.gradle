import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'io.github.tomtzook.gradle-cmake' version '1.2.2'
}

cmake {
    targets {
        main {
            cmakeLists.set(file("src/main/cpp/CMakeLists.txt"))
            targetMachines.add(machines.host)
            // use 'ninja' or 'unixMakefiles'
            generator.set(generators.ninja)
            // if you want disable jni log enable it
            // cmakeArgs.add("-DDISABLE_DEXKIT_LOG=ON")
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    kotlinOptions.languageVersion = "1.5"
}

test {
    systemProperty("java.library.path", "$buildDir/library")
    systemProperty("apk.path", "$projectDir/apk")
}

dependencies {
    implementation 'com.google.flatbuffers:flatbuffers-java:23.5.26'
    testImplementation 'junit:junit:4.13.2'
}

afterEvaluate {
    tasks.register('copyLibrary') {
        def build = tasks.cmakeBuild
        dependsOn(build)
        doLast {
            copy {
                from "$buildDir/cmake"
                into "$buildDir/library"
                include('**/*.so', '**/*.dll', '**/*.dylib')
                eachFile {
                    path = name
                }
                includeEmptyDirs = false
            }
        }
    }
    tasks.jar.dependsOn(tasks.copyLibrary)

    tasks.register("copyReleaseDemo") {
        def assemble = project(":demo").tasks.assembleRelease
        dependsOn(assemble)
        doLast {
            copy {
                from "${project(":demo").buildDir}/outputs/apk/release"
                into "$projectDir/apk"
                include('**/*.apk')
                eachFile {
                    path = name
                }
                rename { String fileName ->
                    fileName.replaceAll(".*\\.apk", "demo.apk")
                }
                includeEmptyDirs = false
            }
        }
    }
    tasks.testClasses.dependsOn(tasks.copyReleaseDemo)
    tasks.testClasses.dependsOn(tasks.copyLibrary)
}

evaluationDependsOn(":demo")