// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class EnumValueMeta : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EnumValueMeta {
        __init(_i, _bb)
        return this
    }
    val id : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val dexId : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val classId : UInt
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val valueName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val valueNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun valueNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsEnumValueMeta(_bb: ByteBuffer): EnumValueMeta = getRootAsEnumValueMeta(_bb, EnumValueMeta())
        fun getRootAsEnumValueMeta(_bb: ByteBuffer, obj: EnumValueMeta): EnumValueMeta {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createEnumValueMeta(builder: FlatBufferBuilder, id: UInt, dexId: UInt, classId: UInt, valueNameOffset: Int) : Int {
            builder.startTable(4)
            addValueName(builder, valueNameOffset)
            addClassId(builder, classId)
            addDexId(builder, dexId)
            addId(builder, id)
            return endEnumValueMeta(builder)
        }
        fun startEnumValueMeta(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addId(builder: FlatBufferBuilder, id: UInt) = builder.addInt(0, id.toInt(), 0)
        fun addDexId(builder: FlatBufferBuilder, dexId: UInt) = builder.addInt(1, dexId.toInt(), 0)
        fun addClassId(builder: FlatBufferBuilder, classId: UInt) = builder.addInt(2, classId.toInt(), 0)
        fun addValueName(builder: FlatBufferBuilder, valueName: Int) = builder.addOffset(3, valueName, 0)
        fun endEnumValueMeta(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
