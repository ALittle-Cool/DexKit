// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class ParametersMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ParametersMatcher {
        __init(_i, _bb)
        return this
    }
    val parameterCount : IntRange? get() = parameterCount(IntRange())
    fun parameterCount(obj: IntRange) : IntRange? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val matchType : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun parameters(j: Int) : OptionalParameterMatcher? = parameters(OptionalParameterMatcher(), j)
    fun parameters(obj: OptionalParameterMatcher, j: Int) : OptionalParameterMatcher? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val parametersLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsParametersMatcher(_bb: ByteBuffer): ParametersMatcher = getRootAsParametersMatcher(_bb, ParametersMatcher())
        fun getRootAsParametersMatcher(_bb: ByteBuffer, obj: ParametersMatcher): ParametersMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createParametersMatcher(builder: FlatBufferBuilder, parameterCountOffset: Int, matchType: Byte, parametersOffset: Int) : Int {
            builder.startTable(3)
            addParameters(builder, parametersOffset)
            addParameterCount(builder, parameterCountOffset)
            addMatchType(builder, matchType)
            return endParametersMatcher(builder)
        }
        fun startParametersMatcher(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addParameterCount(builder: FlatBufferBuilder, parameterCount: Int) = builder.addOffset(0, parameterCount, 0)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(1, matchType, 0)
        fun addParameters(builder: FlatBufferBuilder, parameters: Int) = builder.addOffset(2, parameters, 0)
        fun createParametersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startParametersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endParametersMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
