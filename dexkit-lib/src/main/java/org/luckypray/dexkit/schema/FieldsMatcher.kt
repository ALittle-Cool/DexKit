// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class FieldsMatcher : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FieldsMatcher {
        __init(_i, _bb)
        return this
    }
    fun containFields(j: Int) : FieldMatcher? = containFields(FieldMatcher(), j)
    fun containFields(obj: FieldMatcher, j: Int) : FieldMatcher? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val containFieldsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val matchType : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val fieldCount : IntRange? get() = fieldCount(IntRange())
    fun fieldCount(obj: IntRange) : IntRange? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsFieldsMatcher(_bb: ByteBuffer): FieldsMatcher = getRootAsFieldsMatcher(_bb, FieldsMatcher())
        fun getRootAsFieldsMatcher(_bb: ByteBuffer, obj: FieldsMatcher): FieldsMatcher {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFieldsMatcher(builder: FlatBufferBuilder, containFieldsOffset: Int, matchType: Byte, fieldCountOffset: Int) : Int {
            builder.startTable(3)
            addFieldCount(builder, fieldCountOffset)
            addContainFields(builder, containFieldsOffset)
            addMatchType(builder, matchType)
            return endFieldsMatcher(builder)
        }
        fun startFieldsMatcher(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addContainFields(builder: FlatBufferBuilder, containFields: Int) = builder.addOffset(0, containFields, 0)
        fun createContainFieldsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startContainFieldsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(1, matchType, 0)
        fun addFieldCount(builder: FlatBufferBuilder, fieldCount: Int) = builder.addOffset(2, fieldCount, 0)
        fun endFieldsMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
